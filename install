#!/usr/bin/env zsh

local base=${ZULU_DIR:-"${ZDOTDIR:-$HOME}/.zulu"}
local config=${ZULU_CONFIG_DIR:-"${ZDOTDIR:-$HOME}/.config/zulu"}

function _zulu_color() {
  local color=$1

  builtin shift

  case $color in
    black)    builtin echo "\033[0;30m${@}\033[0;m" ;;
    red)      builtin echo "\033[0;31m${@}\033[0;m" ;;
    green)    builtin echo "\033[0;32m${@}\033[0;m" ;;
    yellow)   builtin echo "\033[0;33m${@}\033[0;m" ;;
    blue)     builtin echo "\033[0;34m${@}\033[0;m" ;;
    magenta)  builtin echo "\033[0;35m${@}\033[0;m" ;;
    cyan)     builtin echo "\033[0;36m${@}\033[0;m" ;;
    white)    builtin echo "\033[0;37m${@}\033[0;m" ;;
  esac
}

function _zulu_spinner_callback() {
  builtin print $@
}

function _zulu_spinner_process() {
  local msg="$1" spinner_index=0

  while [[ 1 -eq 1 ]]; do
    _zulu_spinner_spin
    command sleep 0.1
  done
}

function _zulu_spinner_spin() {
  local -a frames; frames=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')

  # ZSH arrays start at 1, so we need to bump the index if it's 0
  if [[ $spinner_index -eq 0 ]]; then
    spinner_index+=1
  fi

  # Echo the frame
  builtin echo -n $frames[$spinner_index]

  # Set the spinner index to the next frame
  spinner_index=$(( $(( $spinner_index + 1 )) % ${#frames} ))

  # Echo the message and return to the beginning of the line
  builtin echo -en " $msg\r"
}

function _zulu_spinner_start() {
  local msg="$1"

  _zulu_spinner_process "$msg" &!
  export ZULU_SPINNER_PID=$!
}

function _zulu_spinner_stop() {
  [[ "$ZULU_SPINNER_PID" != "" ]] && kill "$ZULU_SPINNER_PID" > /dev/null
  builtin unset ZULU_SPINNER_PID
}


###
# Create the zulu directory structure
###
function _zulu_create_base() {
  local -a dirs; dirs=('bin' 'init' 'packages' 'share')
  for dir in "${dirs[@]}"; do
    command mkdir -p "$base/$dir"
    command touch "$base/$dir/.gitkeep"
  done

  command mkdir -p "$config/functions"
  command touch "$config/packages"
}

###
# Install the zulu core functions
###
function _zulu_install_core() {
  command git clone "https://github.com/zulu-zsh/zulu" "$base/core"
}

###
# Install the package index
###
function _zulu_install_index() {
  command git clone "https://github.com/zulu-zsh/index" "$base/index"
}

###
# Use current $PATH to build a pathfile
###
function _zulu_create_path() {
  local pathfile="$config/path"

  typeset -gUa items; items=()
  items+="$base/bin"
  for p in "${path[@]}"; do
    items+="$p"
  done

  local separator out

  # Separate the array by newlines, and print the contents to the pathfile
  separator=$'\n'
  local oldIFS=$IFS
  IFS="$separator"; out="${items[*]/#/${separator}}"
  builtin echo ${out:${#separator}} >! $pathfile
  IFS=$oldIFS
  builtin unset oldIFS
}

###
# Use current $fpath to build an fpathfile
###
function _zulu_create_fpath() {
  local fpathfile="$config/fpath"

  typeset -gUa items; items=()
  items+="$base/share"
  for p in "${fpath[@]}"; do
    items+="$p"
  done

  local separator out

  # Separate the array by newlines, and print the contents to the fpathfile
  separator=$'\n'
  local oldIFS=$IFS
  IFS="$separator"; out="${items[*]/#/${separator}}"
  builtin echo ${out:${#separator}} >! $fpathfile
  IFS=$oldIFS
  builtin unset oldIFS
}

###
# Use current $cdpath to build an cdpathfile
###
function _zulu_create_cdpath() {
  local cdpathfile="$config/cdpath"

  typeset -gUa items; items=()
  for p in "${cdpath[@]}"; do
    items+="$p"
  done

  local separator out

  # Separate the array by newlines, and print the contents to the cdpathfile
  separator=$'\n'
  local oldIFS=$IFS
  IFS="$separator"; out="${items[*]/#/${separator}}"
  builtin echo ${out:${#separator}} >! $cdpathfile
  IFS=$oldIFS
  builtin unset oldIFS
}

###
# Use current aliases to build alias file
###
function _zulu_create_aliases() {
  local aliasfile="$config/alias"
  builtin echo "" > $aliasfile
  local oldIFS=$IFS
  IFS=$'\n'; for a in `alias`; do
    builtin echo "alias $a\n" >> $aliasfile
  done
  IFS=$oldIFS
  builtin unset oldIFS
}

###
# Install the zulu completion definitions
###
function _zulu_install_completion() {
  command ln -s "$base/core/zulu.zsh-completion" "$base/share/_zulu"
}

###
# Install the initialization script
###
function _zulu_install_init() {
  # Check if a .zshrc already exists
  if [[ -e "${ZDOTDIR:-$HOME}/.zshrc" ]]; then
    # If it contains the command 'zulu init', we don't need to
    # add the initialisation script again
    local check_script=$(command cat "${ZDOTDIR:-$HOME}/.zshrc" | command grep -E -e '^zulu init')
    if [[ -n "$check_script" ]]; then
      return 0
    fi
  fi

  # Add the init script to .zshrc
  local init='
# Initialise zulu plugin manager
source "${ZULU_DIR:-"${ZDOTDIR:-$HOME}/.zulu"}/core/zulu"
zulu init
'

  builtin echo "$init" >> "${ZDOTDIR:-$HOME}/.zshrc"
}

###
# Remove zulu directories if install fails
###
function _zulu_install_cleanup_on_failure() {
  _zulu_spinner_start "Rolling back installation..."

  if [[ -d $base ]]; then
    command rm -rf $base
  fi

  if [[ -d $config && $config_exists -eq 0 ]]; then
    command rm -rf $config
  fi

  builtin echo "$(_zulu_color green '✔') Installation rolled back successfully        "
  _zulu_spinner_stop
}

###
# Install the zulu framework
###
function zulu_install() {
  local out config_exists=0 overwrite_config=0

  if [[ -d $base ]]; then
    builtin echo $(_zulu_color red "Zulu is already installed at $base.")
    builtin echo "If you are wishing to update zulu, you should run 'zulu self-update' instead."
    return 1
  fi

  if [[ -d $config ]]; then
    config_exists=1
    builtin echo $(_zulu_color yellow "Config already exists at $config. Overwrite? [y|N]")
    builtin read -rs -k 1 input

    case $input in
      y)
        overwrite_config=1
        ;;
      *)
        overwrite_config=0
        ;;
    esac
  fi

  _zulu_spinner_start "Creating directory structure..."
  out=$(_zulu_create_base 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    builtin echo "$(_zulu_color green '✔') Created directory structure        "
  else
    _zulu_spinner_stop
    builtin echo "$(_zulu_color red '✘') Error creating directory structure        "
    builtin echo "$out"
    _zulu_install_cleanup_on_failure
    builtin exit 1
  fi

  _zulu_spinner_start "Installing zulu core..."
  out=$(_zulu_install_core 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    builtin echo "$(_zulu_color green '✔') Installed zulu core        "
  else
    _zulu_spinner_stop
    builtin echo "$(_zulu_color red '✘') Error installing zulu core        "
    builtin echo "$out"
    _zulu_install_cleanup_on_failure
    builtin exit 1
  fi

  _zulu_spinner_start "Installing package index..."
  out=$(_zulu_install_index 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    builtin echo "$(_zulu_color green '✔') Installed package index        "
  else
    _zulu_spinner_stop
    builtin echo "$(_zulu_color red '✘') Error installing package index        "
    builtin echo "$out"
    _zulu_install_cleanup_on_failure
    builtin exit 1
  fi

  if [[ $config_exists -eq 0 ]] || [[ $config_exists -eq 1 && $overwrite_config -eq 1 ]]; then
    _zulu_spinner_start "Initializing \$PATH..."
    out=$(_zulu_create_path 2>&1)

    if [ $? -eq 0 ]; then
      _zulu_spinner_stop
      builtin echo "$(_zulu_color green '✔') Initialized \$PATH        "
    else
      _zulu_spinner_stop
      builtin echo "$(_zulu_color red '✘') Error initializing \$PATH        "
      builtin echo "$out"
      _zulu_install_cleanup_on_failure
      builtin exit 1
    fi

    _zulu_spinner_start "Initializing \$fpath..."
    out=$(_zulu_create_fpath 2>&1)

    if [ $? -eq 0 ]; then
      _zulu_spinner_stop
      builtin echo "$(_zulu_color green '✔') Initialized \$fpath        "
    else
      _zulu_spinner_stop
      builtin echo "$(_zulu_color red '✘') Error initializing \$fpath        "
      builtin echo "$out"
      _zulu_install_cleanup_on_failure
      builtin exit 1
    fi

    _zulu_spinner_start "Initializing \$cdpath..."
    out=$(_zulu_create_cdpath 2>&1)

    if [ $? -eq 0 ]; then
      _zulu_spinner_stop
      builtin echo "$(_zulu_color green '✔') Initialized \$cdpath        "
    else
      _zulu_spinner_stop
      builtin echo "$(_zulu_color red '✘') Error initializing \$cdpath        "
      builtin echo "$out"
      _zulu_install_cleanup_on_failure
      builtin exit 1
    fi

    _zulu_spinner_start "Initializing aliases..."
    out=$(_zulu_create_aliases 2>&1)

    if [ $? -eq 0 ]; then
      _zulu_spinner_stop
      builtin echo "$(_zulu_color green '✔') Initialized aliases        "
    else
      _zulu_spinner_stop
      builtin echo "$(_zulu_color red '✘') Error initializing aliases        "
      builtin echo "$out"
      _zulu_install_cleanup_on_failure
      builtin exit 1
    fi

    _zulu_spinner_start "Installing completion..."
    out=$(_zulu_install_completion 2>&1)

    if [ $? -eq 0 ]; then
      _zulu_spinner_stop
      builtin echo "$(_zulu_color green '✔') Installed completion        "
    else
      _zulu_spinner_stop
      builtin echo "$(_zulu_color red '✘') Error installing completion        "
      builtin echo "$out"
      _zulu_install_cleanup_on_failure
      builtin exit 1
    fi
  fi

  _zulu_spinner_start "Installing initialization script..."
  out=$(_zulu_install_init 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    builtin echo "$(_zulu_color green '✔') Installed initialization script        "
  else
    _zulu_spinner_stop
    builtin echo "$(_zulu_color red '✘') Error installing initialization script        "
    builtin echo "$out"
    _zulu_install_cleanup_on_failure
    builtin exit 1
  fi

  local oldPWD=$PWD
  builtin cd "$base/core"
  _zulu_spinner_start "Running build script..."
  out=$(./build.zsh 2>&1)
  state=$?

  builtin cd $oldPWD
  builtin unset oldPWD

  if [ $state -eq 0 ]; then
    _zulu_spinner_stop
    builtin echo "$(_zulu_color green '✔') Build script complete        "
  else
    _zulu_spinner_stop
    builtin echo "$(_zulu_color red '✘') Error running build script        "
    builtin echo "$out"
    _zulu_install_cleanup_on_failure
    builtin exit 1
  fi

  # Source zulu and install dependencies
  builtin source "$base/core/zulu"
  zulu init

  # Install some important packages
  zulu install color revolver zulu-theme
  zulu theme zulu-theme

  builtin echo
  builtin echo " _____         ___"
  builtin echo "/__  /  __  __/  /_  __"
  builtin echo "  / /  / / / /  / / / /"
  builtin echo " / /__/ /_/ /  / /_/ /"
  builtin echo "/____/\\____/__/\\____/"
  builtin echo
  builtin echo "Version $(zulu --version)"
  builtin echo
  builtin echo "Thanks for installing Zulu! You're now all set up and ready to go."
  builtin echo
  builtin echo "Documentation: https://zulu.sh/docs"
  builtin echo "Feedback:      https://github.com/zulu-zsh/zulu/issues"
  builtin echo "Community:     https://gitter.im/zulu-zsh/zulu"
  builtin echo
}

zulu_install
