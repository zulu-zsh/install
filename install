#!/usr/bin/env zsh

local base=${ZULU_DIR:-"${ZDOTDIR:-$HOME}/.zulu"}
local config=${ZULU_CONFIG_DIR:-"${ZDOTDIR:-$HOME}/.config/zulu"}

function _zulu_color() {
  local color=$1

  shift

  case $color in
    black)    echo "\033[0;30m${@}\033[0;m" ;;
    red)      echo "\033[0;31m${@}\033[0;m" ;;
    green)    echo "\033[0;32m${@}\033[0;m" ;;
    yellow)   echo "\033[0;33m${@}\033[0;m" ;;
    blue)     echo "\033[0;34m${@}\033[0;m" ;;
    magenta)  echo "\033[0;35m${@}\033[0;m" ;;
    cyan)     echo "\033[0;36m${@}\033[0;m" ;;
    white)    echo "\033[0;37m${@}\033[0;m" ;;
  esac
}

function _zulu_spinner_callback() {
  print $@
}

function _zulu_spinner_process() {
  local msg="$1" spinner_index=0

  while [[ 1=1 ]]; do
    _zulu_spinner_spin
    sleep 0.1
  done
}

function _zulu_spinner_spin() {
  local frames=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')

  # ZSH arrays start at 1, so we need to bump the index if it's 0
  if [[ $spinner_index -eq 0 ]]; then
    spinner_index+=1
  fi

  # Echo the frame
  echo -n $frames[$spinner_index]

  # Set the spinner index to the next frame
  spinner_index=$(( $(( $spinner_index + 1 )) % ${#frames} ))

  # Echo the message and return to the beginning of the line
  echo -en " $msg\r"
}

function _zulu_spinner_start() {
  local msg="$1"

  _zulu_spinner_process "$msg" &!
  export ZULU_SPINNER_PID=$!
}

function _zulu_spinner_stop() {
  [[ "$ZULU_SPINNER_PID" != "" ]] && kill "$ZULU_SPINNER_PID" > /dev/null
  unset ZULU_SPINNER_PID
}


###
# Create the zulu directory structure
###
function _zulu_create_base() {
  local dirs=('bin' 'init' 'packages' 'share')
  for dir in "${dirs[@]}"; do
    mkdir -p "$base/$dir"
    touch "$base/$dir/.gitkeep"
  done

  mkdir -p "$config"
}

###
# Install the zulu core functions
###
function _zulu_install_core() {
  git clone "https://github.com/zulu-zsh/zulu" "$base/core"
}

###
# Install the package index
###
function _zulu_install_index() {
  git clone "https://github.com/zulu-zsh/index" "$base/index"
}

###
# Use current $PATH to build a pathfile
###
function _zulu_create_path() {
  local pathfile="$config/path"
  echo "$base/bin" > $pathfile
  for p in "${path[@]}"; do
    echo "$p" >> $pathfile
  done
}

###
# Use current $fpath to build an fpathfile
###
function _zulu_create_fpath() {
  local fpathfile="$config/fpath"
  echo "$base/share" > $fpathfile
  for fp in "${fpath[@]}"; do
    echo $fp >> $fpathfile
  done
}

###
# Use current $cdpath to build an cdpathfile
###
function _zulu_create_cdpath() {
  local cdpathfile="$config/cdpath"
  echo "$base/share" > $cdpathfile
  for fp in "${cdpath[@]}"; do
    echo $fp >> $cdpathfile
  done
}

###
# Use current aliases to build alias file
###
function _zulu_create_aliases() {
  local aliasfile="$config/alias"
  echo "" > $aliasfile
  IFS=$'\n'; for a in `alias`; do
    echo "alias $a\n" >> $aliasfile
  done
}

###
# Install the zulu completion definitions
###
function _zulu_install_completion() {
  ln -s "$base/core/zulu.zsh-completion" "$base/share/_zulu"
}

###
# Install the initialization script
###
function _zulu_install_init() {
  # Add the init script to .zshrc
  local init='
# Initialise zulu plugin manager
source "${ZULU_DIR:-"${ZDOTDIR:-$HOME}/.zulu"}/core/zulu"
zulu init
'

  echo "$init" >> "${ZDOTDIR:-$HOME}/.zshrc"
}

###
# Install the zulu framework
###
function zulu_install() {
  _zulu_spinner_start "Creating directory structure..."
  out=$(_zulu_create_base 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Created directory structure        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error creating directory structure        "
    echo "$out"
  fi

  _zulu_spinner_start "Installing zulu core..."
  out=$(_zulu_install_core 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Installed zulu core        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error installing zulu core        "
    echo "$out"
  fi

  _zulu_spinner_start "Installing package index..."
  out=$(_zulu_install_index 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Installed package index        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error installing package index        "
    echo "$out"
  fi

  _zulu_spinner_start "Initializing \$PATH..."
  out=$(_zulu_create_path 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Initialized \$PATH        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error initializing \$PATH        "
    echo "$out"
  fi

  _zulu_spinner_start "Initializing \$fpath..."
  out=$(_zulu_create_fpath 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Initialized \$fpath        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error initializing \$fpath        "
    echo "$out"
  fi

  _zulu_spinner_start "Initializing \$cdpath..."
  out=$(_zulu_create_cdpath 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Initialized \$cdpath        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error initializing \$cdpath        "
    echo "$out"
  fi

  _zulu_spinner_start "Initializing aliases..."
  out=$(_zulu_create_aliases 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Initialized aliases        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error initializing aliases        "
    echo "$out"
  fi

  _zulu_spinner_start "Installing completion..."
  out=$(_zulu_install_completion 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Installed completion        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error installing completion        "
    echo "$out"
  fi

  _zulu_spinner_start "Installing initialization script..."
  out=$(_zulu_install_init 2>&1)

  if [ $? -eq 0 ]; then
    _zulu_spinner_stop
    echo "$(_zulu_color green '✔') Installed initialization script        "
  else
    _zulu_spinner_stop
    echo "$(_zulu_color red '✘') Error installing initialization script        "
    echo "$out"
  fi

  # Source zulu and install dependencies
  source "$base/core/zulu"
  zulu init
}

zulu_install
